{
  "immersive_weathering.area_condition.type": "Type",
  "immersive_weathering.area_condition.type.generate_if_not_too_many": "Generate if not too many",
  "immersive_weathering.area_condition.type.neighbor_based_generation": "Neighbor based generation",
  "immersive_weathering.area_condition.generate_if_not_too_many.radiusX": "Radius X",
  "immersive_weathering.area_condition.generate_if_not_too_many.radiusY": "Radius Y",
  "immersive_weathering.area_condition.generate_if_not_too_many.radiusZ": "Radius Z",
  "immersive_weathering.area_condition.generate_if_not_too_many.requiredAmount": "Required amount",
  "immersive_weathering.area_condition.generate_if_not_too_many.yOffset": "Y offset",
  "immersive_weathering.area_condition.generate_if_not_too_many.must_have": "Must have",
  "immersive_weathering.area_condition.generate_if_not_too_many.must_not_have": "Must not have",
  "immersive_weathering.area_condition.generate_if_not_too_many.includes": "Includes",
  "immersive_weathering.area_condition.neighbor_based_generation.must_have": "Must have",
  "immersive_weathering.area_condition.neighbor_based_generation.must_not_have": "Must not have",
  "immersive_weathering.area_condition.neighbor_based_generation.required_amount": "Required amount",
  "immersive_weathering.area_condition.neighbor_based_generation.directions": "Directions",
  "immersive_weathering.area_condition.neighbor_based_generation.directions.entry": "Direction",
  "immersive_weathering.block_growth.area_condition": "Area conditions",
  "immersive_weathering.block_growth.position_predicates": "Position predicates",
  "immersive_weathering.block_growth.position_predicates.entry": "Position test",
  "immersive_weathering.block_growth.growth_chance": "Growth chance",
  "immersive_weathering.block_growth.growth_for_face": "Growth for face",
  "immersive_weathering.block_growth.growth_for_face.entry": "Face",
  "immersive_weathering.block_growth.growth_for_face.entry.direction": "Direction",
  "immersive_weathering.block_growth.growth_for_face.entry.weight": "Weight",
  "immersive_weathering.block_growth.growth_for_face.entry.growth": "Growth",
  "immersive_weathering.block_growth.growth_for_face.entry.growth.entry.data": "Block pair",
  "immersive_weathering.block_growth.growth_for_face.entry.growth.entry.weight": "Weight",
  "immersive_weathering.block_growth.owners": "Owners",
  "immersive_weathering.block_growth.owners.entry": "Block",
  "immersive_weathering.block_growth.replacing_target": "Replacing target",
  "immersive_weathering.block_growth.target_self": "Target self",
  "immersive_weathering.block_growth.destroy_target": "Destroy target",
  "immersive_weathering.block_pair.block": "Block",
  "immersive_weathering.block_pair.above_block": "Above block",
  "immersive_weathering.position_test.predicate_type": "Predicate type",
  "immersive_weathering.position_test.predicate_type.biome_match": "Biome match",
  "immersive_weathering.position_test.predicate_type.day_test": "Day test",
  "immersive_weathering.position_test.predicate_type.nand": "NAND",
  "immersive_weathering.position_test.predicate_type.precipitation_test": "Precipitation test",
  "immersive_weathering.position_test.predicate_type.temperature_range": "Temperature range",
  "immersive_weathering.position_test.biome_match.biomes": "Biomes",
  "immersive_weathering.position_test.day_test.day": "Day",
  "immersive_weathering.position_test.nand.predicates": "Predicates",
  "immersive_weathering.position_test.precipitation_test.precipitation": "Precipitation",
  "immersive_weathering.position_test.temperature_range.min": "Min",
  "immersive_weathering.position_test.temperature_range.max": "Max",
  "immersive_weathering.position_test.temperature_range.use_local_pos": "Use local pos",
  "immersive_weathering:rule_test.always_true": "Always true",
  "immersive_weathering:rule_test.block_match": "Block match",
  "immersive_weathering:rule_test.blockstate_match": "Block state match",
  "immersive_weathering:rule_test.random_block_match": "Random block match",
  "immersive_weathering:rule_test.random_blockstate_match": "Random block state match",
  "immersive_weathering:rule_test.tag_match": "Tag match",
  "immersive_weathering:rule_test.immersive_weathering:block_set_match": "Block set match",
  "immersive_weathering:rule_test.immersive_weathering:fluid_match": "Fluid match",
  "immersive_weathering:rule_test.immersive_weathering:tree_log": "Tree log",
  "rule_test.blocks": "Blocks",
  "rule_test.fluid": "Fluid",
  "tiers": "Tiers",
  "tiers.entry": "Tier",
  "villagerconfig:tier.total_exp_required": "Required trader XP",
  "villagerconfig:tier.total_exp_required.help": "The amount of total trader xp required to unlock this tier.",
  "villagerconfig:tier.groups.entry.num_to_select": "Count",
  "villagerconfig:tier.groups.entry.num_to_select.help": "The amount of trades that are randomly chosen.",
  "villagerconfig:tier.groups.entry.trades": "Trades",
  "villagerconfig:tier.groups.entry.trades.entry": "Trade",
  "villagerconfig:tier.groups.entry.trades.entry.cost_a": "Cost A",
  "villagerconfig:tier.groups.entry.trades.entry.cost_b": "Cost B",
  "villagerconfig:tier.groups.entry.trades.entry.result": "Result",
  "villagerconfig:tier.groups.entry.trades.entry.price_multiplier": "Price multiplier",
  "villagerconfig:tier.groups.entry.trades.entry.price_multiplier.help": "Used for adjusting the price for specific players of Cost A.",
  "villagerconfig:tier.groups.entry.trades.entry.trader_exp": "Trader XP",
  "villagerconfig:tier.groups.entry.trades.entry.trader_exp.help": "The amount of trader xp the trader receives, when this trade happens.",
  "villagerconfig:tier.groups.entry.trades.entry.max_uses": "Max uses",
  "villagerconfig:tier.groups.entry.trades.entry.max_uses.help": "The amount of uses until the trade gets temporarily locked.",
  "villagerconfig:tier.groups.entry.trades.entry.reference_providers": "Reference providers",
  "villagerconfig:tier.groups.entry.trades.entry.reward_experience": "Reward experience",
  "villagerconfig:loot_function_type.apply_bonus": "Apply bonus",
  "villagerconfig:loot_function_type.copy_name": "Copy name",
  "villagerconfig:loot_function_type.copy_nbt": "Copy NBT",
  "villagerconfig:loot_function_type.copy_state": "Copy block states",
  "villagerconfig:loot_function_type.enchant_randomly": "Enchant randomly",
  "villagerconfig:loot_function_type.enchant_with_levels": "Enchant with levels",
  "villagerconfig:loot_function_type.exploration_map": "Exploration map properties",
  "villagerconfig:loot_function_type.explosion_decay": "Explosion decay",
  "villagerconfig:loot_function_type.fill_player_head": "Fill player head",
  "villagerconfig:loot_function_type.furnace_smelt": "Furnace smelt",
  "villagerconfig:loot_function_type.limit_count": "Limit count",
  "villagerconfig:loot_function_type.looting_enchant": "Looting enchant",
  "villagerconfig:loot_function_type.set_attributes": "Set attributes",
  "villagerconfig:loot_function_type.set_banner_pattern": "Set banner pattern",
  "villagerconfig:loot_function_type.set_contents": "Set contents",
  "villagerconfig:loot_function_type.set_count": "Set count",
  "villagerconfig:loot_function_type.set_damage": "Set damage",
  "villagerconfig:loot_function_type.set_data": "Set data",
  "villagerconfig:loot_function_type.set_enchantments": "Set enchantments",
  "villagerconfig:loot_function_type.set_instrument": "Set instrument",
  "villagerconfig:loot_function_type.set_loot_table": "Set loot table",
  "villagerconfig:loot_function_type.set_lore": "Set lore",
  "villagerconfig:loot_function_type.set_name": "Set name",
  "villagerconfig:loot_function_type.set_nbt": "Set NBT",
  "villagerconfig:loot_function_type.set_potion": "Set potion",
  "villagerconfig:loot_function_type.set_stew_effect": "Set stew effect",
  "villagerconfig:loot_function_type.villagerconfig:enchant_randomly": "Enchant randomly (VillagerConfig)",
  "villagerconfig:loot_function_type.villagerconfig:set_dye": "Set dye (VillagerConfig)",
  "villagerconfig:number_provider.max": "Max",
  "villagerconfig:number_provider.min": "Min",
  "villagerconfig:number_provider.n": "N",
  "villagerconfig:number_provider.p": "P",
  "villagerconfig:number_provider.scale": "Scale",
  "villagerconfig:number_provider.score": "Objective",
  "villagerconfig:number_provider.target": "Target",
  "villagerconfig:number_provider.addends": "Addends",
  "villagerconfig:number_provider.factors": "Factors",
  "villagerconfig:number_provider.id": "ID",
  "villagerconfig:number_provider.type": "Type",
  "villagerconfig:number_provider.type.binomial": "Binomial",
  "villagerconfig:number_provider.type.constant": "Constant+",
  "villagerconfig:number_provider.type.number": "Constant",
  "villagerconfig:number_provider.type.object": "Uniform",
  "villagerconfig:number_provider.type.score": "Score",
  "villagerconfig:number_provider.type.uniform": "Uniform+",
  "villagerconfig:number_provider.type.villagerconfig:add": "Add (VillagerConfig)",
  "villagerconfig:number_provider.type.villagerconfig:multiply": "Multiply (VillagerConfig)",
  "villagerconfig:number_provider.type.villagerconfig:reference": "Reference (VillagerConfig)",
  "villagerconfig:number_provider.value": "Number"

}
